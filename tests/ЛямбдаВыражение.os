#Использовать ".."
#Использовать reflector

Перем Рефлектор; // Рефлектор

&Тест
Процедура УстанавливаетсяИнтерфейс() Экспорт

	// Дано
	
	ЛямбдаВыражение = Новый ЛямбдаВыражение("х -> Возврат х");

	// Когда

	ЛямбдаВыражение.Интерфейс(
		ФункциональныеИнтерфейсы.УниФункция()
	);

	// Тогда

	Ожидаем.Что(Рефлектор.ПолучитьСвойство(ЛямбдаВыражение, "мИнтерфейс"))
		.Равно(ФункциональныеИнтерфейсы.УниФункция());

КонецПроцедуры

&Тест
Процедура УстанавливаетсяПроизвольныйИнтерфейс() Экспорт

	// Дано
	
	ЛямбдаВыражение = Новый ЛямбдаВыражение("х -> Возврат х");

	Интерфейс = Новый ИнтерфейсОбъекта();
	Интерфейс.ФункцияИнтерфейса("Тест", 1);

	// Когда

	ЛямбдаВыражение.Интерфейс(
		Интерфейс
	);

	// Тогда

	Ожидаем.Что(Рефлектор.ПолучитьСвойство(ЛямбдаВыражение, "мИнтерфейс"))
		.Равно(Интерфейс);

КонецПроцедуры

&Тест
Процедура ПриУстановкеИнтерфейсаПроверяетсяЧтоМногострочнаяФункцияДолжнаСодержатьВозврат() Экспорт

	// Дано

	ЛямбдаВыражение = Новый ЛямбдаВыражение("х -> 
	|	х = х + 1;
	|");

	Параметры = Новый Массив;
	Параметры.Добавить(ФункциональныеИнтерфейсы.УниФункция());

	// Тогда

	Ожидаем.Что(ЛямбдаВыражение)
		.Метод("Интерфейс", Параметры)
		.ВыбрасываетИсключение("Лямбда выражение должно возвращать значение");

КонецПроцедуры

&Тест
Процедура ПриУстановкеИнтерфейсаПодставляетсяВозвратВОднострочнуюФункцию() Экспорт

	// Дано
	
	ЛямбдаВыражение = Новый ЛямбдаВыражение("х -> ВозвратныйВозврат");

	// Когда

	ЛямбдаВыражение.Интерфейс(
		ФункциональныеИнтерфейсы.УниФункция()
	);

	// Тогда

	Ожидаем.Что(Рефлектор.ПолучитьСвойство(ЛямбдаВыражение, "РазобранноеВыражение").Тело)
		.Равно("Возврат ВозвратныйВозврат");

КонецПроцедуры

&Тест
Процедура ПриУстановкеИнтерфейсаПроверяетсяЧтоПроцедураНеДолжнаСодержатьВозвратЗначения() Экспорт

	// Дано
	
	ЛямбдаВыражение = Новый ЛямбдаВыражение("х -> Возврат х");

	Параметры = Новый Массив;
	Параметры.Добавить(ФункциональныеИнтерфейсы.УниПроцедура());

	// Тогда

	Ожидаем.Что(ЛямбдаВыражение)
		.Метод("Интерфейс", Параметры)
		.ВыбрасываетИсключение("Лямбда выражение не должно возвращать значение");

	// Тогда

КонецПроцедуры

&Тест
Процедура УстанавливаетсяКонтекст() Экспорт

	// Дано

	ЛямбдаВыражение = Новый ЛямбдаВыражение("х -> Возврат х");

	Контекст = Новый Структура("А", 1);

	// Когда

	ЛямбдаВыражение.Контекст(Контекст);

	// Тогда

	Ожидаем.Что(Рефлектор.ПолучитьСвойство(ЛямбдаВыражение, "мКонтекст"))
		.Равно(Контекст);

КонецПроцедуры

&Тест
Процедура ПроверкаТипаКонтекста() Экспорт

	// Дано

	ЛямбдаВыражение = Новый ЛямбдаВыражение("х -> Возврат х");

	Параметры = Новый Массив;
	Параметры.Добавить(Новый Массив);

	// Тогда

	Ожидаем.Что(ЛямбдаВыражение)
		.Метод("Контекст", Параметры)
		.ВыбрасываетИсключение("Контекстом для лямбда выражения может выступать только структура");

КонецПроцедуры

&Тест
Процедура ОбъектЗахватывается() Экспорт

	// Дано

	ЛямбдаВыражение = Новый ЛямбдаВыражение("х -> Возврат х");

	// Когда

	ЛямбдаВыражение.ЗахватитьОбъект(ЭтотОбъект);

	// Тогда

	Ожидаем.Что(Рефлектор.ПолучитьСвойство(ЛямбдаВыражение, "мОбъект"))
		.Равно(ЭтотОбъект);

КонецПроцедуры

&Тест
Процедура ОбъектСФункциейСоздаётся() Экспорт

	// Дано

	ЛямбдаВыражение = Новый ЛямбдаВыражение("х -> Возврат х")
		.Интерфейс(ФункциональныеИнтерфейсы.УниФункция());

	// Когда

	Объект = ЛямбдаВыражение.ВОбъект();

	// Тогда

	Ожидаем.Что(Объект.Применить(1)).Равно(1);

КонецПроцедуры

&Тест
Процедура ОбъектСПроцедуройСоздаётся() Экспорт

	// Дано

	ЛямбдаВыражение = Новый ЛямбдаВыражение("х -> х = х + 1")
		.Интерфейс(ФункциональныеИнтерфейсы.УниПроцедура());

	// Когда

	Объект = ЛямбдаВыражение.ВОбъект();

	// Тогда

	Проверка = 1;
	Объект.Принять(Проверка);

	Ожидаем.Что(Проверка).Равно(2);

КонецПроцедуры

&Тест
Процедура ОбъектСКонтекстомСоздаётся() Экспорт

	// Дано

	Контекст = Новый Структура("А", 1);
	
	ЛямбдаВыражение = Новый ЛямбдаВыражение("х -> Возврат х + а")
		.Интерфейс(ФункциональныеИнтерфейсы.УниФункция())
		.Контекст(Контекст);

	// Когда

	Объект = ЛямбдаВыражение.ВОбъект();

	// Тогда

	Ожидаем.Что(Объект.Применить(2)).Равно(3);

КонецПроцедуры

&Тест
Процедура ОбъектСЗахваченнымОбъектомСоздаётся() Экспорт

	// Дано

	ЛямбдаВыражение = Новый ЛямбдаВыражение("х -> Возврат х + ПубличноеПоле + ПриватноеПоле + Тест(4)")
		.Интерфейс(ФункциональныеИнтерфейсы.УниФункция())
		.ЗахватитьОбъект(ЗахватываемыйОбъект());

	// Когда

	Объект = ЛямбдаВыражение.ВОбъект();

	// Тогда

	Ожидаем.Что(Объект.Применить(1)).Равно(10);

КонецПроцедуры

&Тест
Процедура ОбъектСПроизвольнымИнтерфейсомСоздаётся() Экспорт

	// Дано

	Интерфейс = Новый ИнтерфейсОбъекта();
	Интерфейс.ФункцияИнтерфейса("Тест", 1);

	ЛямбдаВыражение = Новый ЛямбдаВыражение("х -> х")
		.Интерфейс(Интерфейс);

	// Когда

	Объект = ЛямбдаВыражение.ВОбъект();

	// Тогда

	Ожидаем.Что(Объект.Тест(2)).Равно(2);

КонецПроцедуры

&Тест
Процедура ДействиеСоздаётся() Экспорт

	// Дано

	ЛямбдаВыражение = Новый ЛямбдаВыражение("х -> Возврат х")
		.Интерфейс(ФункциональныеИнтерфейсы.УниФункция());

	// Когда

	Действие = ЛямбдаВыражение.ВДействие();

	// Тогда

	Ожидаем.Что(Действие.Выполнить(1)).Равно(1);

КонецПроцедуры

&Тест
Процедура ОпределяетсяИнтерфейсДляФункцииБезПараметров() Экспорт

	// Дано

	ЛямбдаВыражение = Новый ЛямбдаВыражение(" -> Возврат 1");

	// Когда

	ЛямбдаВыражение.ВОбъект();

	// Тогда

	Ожидаем.Что(Рефлектор.ПолучитьСвойство(ЛямбдаВыражение, "мИнтерфейс"))
		.Равно(ФункциональныеИнтерфейсы.Вызываемый());

КонецПроцедуры

&Тест
Процедура ОпределяетсяИнтерфейсДляФункцииСОднимПараметром() Экспорт

	// Дано

	ЛямбдаВыражение = Новый ЛямбдаВыражение("х -> Возврат х");

	// Когда

	ЛямбдаВыражение.ВОбъект();

	// Тогда

	Ожидаем.Что(Рефлектор.ПолучитьСвойство(ЛямбдаВыражение, "мИнтерфейс"))
		.Равно(ФункциональныеИнтерфейсы.УниФункция());

КонецПроцедуры

&Тест
Процедура ОпределяетсяИнтерфейсДляФункцииСДвумяПараметрами() Экспорт

	// Дано

	ЛямбдаВыражение = Новый ЛямбдаВыражение("х, у -> Возврат х");

	// Когда

	ЛямбдаВыражение.ВОбъект();

	// Тогда

	Ожидаем.Что(Рефлектор.ПолучитьСвойство(ЛямбдаВыражение, "мИнтерфейс"))
		.Равно(ФункциональныеИнтерфейсы.БиФункция());

КонецПроцедуры

&Тест
Процедура ОпределяетсяИнтерфейсДляФункцииСТремяПараметрами() Экспорт

	// Дано

	ЛямбдаВыражение = Новый ЛямбдаВыражение("х, у, а -> Возврат х");

	// Когда

	ЛямбдаВыражение.ВОбъект();

	// Тогда

	Ожидаем.Что(Рефлектор.ПолучитьСвойство(ЛямбдаВыражение, "мИнтерфейс"))
		.Равно(ФункциональныеИнтерфейсы.ТриФункция());

КонецПроцедуры

&Тест
Процедура ОпределяетсяИнтерфейсДляПроцедурыБезПараметров() Экспорт

	// Дано

	ЛямбдаВыражение = Новый ЛямбдаВыражение(" -> X = 1 = 1");

	// Когда

	ЛямбдаВыражение.ВОбъект();

	// Тогда

	Ожидаем.Что(Рефлектор.ПолучитьСвойство(ЛямбдаВыражение, "мИнтерфейс"))
		.Равно(ФункциональныеИнтерфейсы.Запускаемый());

КонецПроцедуры

&Тест
Процедура ОпределяетсяИнтерфейсДляПроцедурыСОднимПараметром() Экспорт

	// Дано

	ЛямбдаВыражение = Новый ЛямбдаВыражение("х -> х = х");

	// Когда

	ЛямбдаВыражение.ВОбъект();

	// Тогда

	Ожидаем.Что(Рефлектор.ПолучитьСвойство(ЛямбдаВыражение, "мИнтерфейс"))
		.Равно(ФункциональныеИнтерфейсы.УниПроцедура());

КонецПроцедуры

&Тест
Процедура ОпределяетсяИнтерфейсДляПроцедурыСДвумяПараметрами() Экспорт

	// Дано

	ЛямбдаВыражение = Новый ЛямбдаВыражение("х, у -> х = х + у");

	// Когда

	ЛямбдаВыражение.ВОбъект();

	// Тогда

	Ожидаем.Что(Рефлектор.ПолучитьСвойство(ЛямбдаВыражение, "мИнтерфейс"))
		.Равно(ФункциональныеИнтерфейсы.БиПроцедура());

КонецПроцедуры

&Тест
Процедура ОпределяетсяИнтерфейсДляПроцедурыСТремяПараметрами() Экспорт

	// Дано

	ЛямбдаВыражение = Новый ЛямбдаВыражение("х, у, а -> х = х + у + а");

	// Когда

	ЛямбдаВыражение.ВОбъект();

	// Тогда

	Ожидаем.Что(Рефлектор.ПолучитьСвойство(ЛямбдаВыражение, "мИнтерфейс"))
		.Равно(ФункциональныеИнтерфейсы.ТриПроцедура());

КонецПроцедуры

&Тест
Процедура ИсключениеПриНевозможностиПодобратьИнтерфейс() Экспорт

	// Дано

	ЛямбдаВыражение = Новый ЛямбдаВыражение("х, у, а, б -> х = х + у + а + б");

	// Когда

	// Тогда

	Ожидаем.Что(ЛямбдаВыражение)
		.Метод("ВОбъект")
		.ВыбрасываетИсключение("Невозможно определить функциональный интерфейс для лямбда выражения");

КонецПроцедуры

&Тест
Процедура АннотированныеПараметры() Экспорт

	// Дано
	ЛямбдаВыражение = Новый ЛямбдаВыражение(
		"&АннотацияБезПараметра
		|&Аннотация('20200101')
		|&Аннотация(Значение = Истина, Параметра = 1)
		|(
		|	&АннотацияБезПараметра x,
		|	&Аннотация(Значение = ""С двумя"", Параметра = ""ми"") y,
		|		&АннотацияБезПараметра &Аннотация(""с одним параметром"")
		|		&Аннотация(Значение = ""С двумя"", Параметра = ""ми"")
		|		z
		|) ->
		|  Возврат x+y+z"
	);

	// Когда
	Объект = ЛямбдаВыражение.ВОбъект();

	// Тогда

	Методы = Рефлектор.ПолучитьТаблицуМетодов(Объект);

	Метод = Методы.Найти("Применить", "Имя");

	Ожидаем.Что(Метод).Существует();

	Ожидаем.Что(Метод.КоличествоПараметров).Равно(3);
	Ожидаем.Что(Метод.Аннотации.Количество()).Равно(3);

	Аннотация = Метод.Аннотации[0];

	Ожидаем.Что(Аннотация.Имя).Равно("АннотацияБезПараметра");
	Ожидаем.Что(Аннотация.Параметры.Количество()).Равно(0);

	Аннотация = Метод.Аннотации[1];

	Ожидаем.Что(Аннотация.Имя).Равно("Аннотация");
	Ожидаем.Что(Аннотация.Параметры.Количество()).Равно(1);
	Ожидаем.Что(Аннотация.Параметры[0].Имя).ЭтоНеопределено();
	Ожидаем.Что(Аннотация.Параметры[0].Значение).Равно('20200101');

	Аннотация = Метод.Аннотации[2];

	Ожидаем.Что(Аннотация.Имя).Равно("Аннотация");
	Ожидаем.Что(Аннотация.Параметры.Количество()).Равно(2);
	Ожидаем.Что(Аннотация.Параметры[0].Имя).Равно("Значение");
	Ожидаем.Что(Аннотация.Параметры[0].Значение).Равно(Истина);
	Ожидаем.Что(Аннотация.Параметры[1].Имя).Равно("Параметра");
	Ожидаем.Что(Аннотация.Параметры[1].Значение).Равно(1);

	Параметр = Метод.Параметры[0];

	Ожидаем.Что(Параметр.Имя).Равно("x");

	Аннотация = Параметр.Аннотации[0];

	Ожидаем.Что(Аннотация.Имя).Равно("АннотацияБезПараметра");
	Ожидаем.Что(Аннотация.Параметры.Количество()).Равно(0);

	Параметр = Метод.Параметры[1];

	Ожидаем.Что(Параметр.Имя).Равно("y");

	Аннотация = Параметр.Аннотации[0];

	Ожидаем.Что(Аннотация.Имя).Равно("Аннотация");
	Ожидаем.Что(Аннотация.Параметры.Количество()).Равно(2);
	Ожидаем.Что(Аннотация.Параметры[0].Имя).Равно("Значение");
	Ожидаем.Что(Аннотация.Параметры[0].Значение).Равно("С двумя");
	Ожидаем.Что(Аннотация.Параметры[1].Имя).Равно("Параметра");
	Ожидаем.Что(Аннотация.Параметры[1].Значение).Равно("ми");

	Параметр = Метод.Параметры[2];

	Ожидаем.Что(Параметр.Имя).Равно("z");

	Аннотация = Параметр.Аннотации[0];

	Ожидаем.Что(Аннотация.Имя).Равно("АннотацияБезПараметра");
	Ожидаем.Что(Аннотация.Параметры.Количество()).Равно(0);

	Аннотация = Параметр.Аннотации[1];

	Ожидаем.Что(Аннотация.Имя).Равно("Аннотация");
	Ожидаем.Что(Аннотация.Параметры.Количество()).Равно(1);
	Ожидаем.Что(Аннотация.Параметры[0].Имя).ЭтоНеопределено();
	Ожидаем.Что(Аннотация.Параметры[0].Значение).Равно("с одним параметром");

	Аннотация = Параметр.Аннотации[2];

	Ожидаем.Что(Аннотация.Имя).Равно("Аннотация");
	Ожидаем.Что(Аннотация.Параметры.Количество()).Равно(2);
	Ожидаем.Что(Аннотация.Параметры[0].Имя).Равно("Значение");
	Ожидаем.Что(Аннотация.Параметры[0].Значение).Равно("С двумя");
	Ожидаем.Что(Аннотация.Параметры[1].Имя).Равно("Параметра");
	Ожидаем.Что(Аннотация.Параметры[1].Значение).Равно("ми");

	Ожидаем.Что(Объект.Применить(1, 2, 3)).Равно(6);

КонецПроцедуры

&Тест
Процедура ФигурнаяСкобкаВнутриВыраженияНеЛомаетЛямбду() Экспорт

	// Дано

	ЛямбдаВыражение = Новый ЛямбдаВыражение("х -> Возврат ""{"" + х + ""}"" }");

	// Когда

	Результат = ЛямбдаВыражение.ВОбъект().Применить("1");

	// Тогда

	Ожидаем.Что(Результат).Равно("{1}");

КонецПроцедуры

&Тест
Процедура ПредставлениеПереопределяется() Экспорт

	// Дано

	ЛямбдаВыражение = Новый ЛямбдаВыражение("х -> х = х + 1");

	// Когда

	Результат = Строка(ЛямбдаВыражение.ВОбъект());

	// Тогда

	Ожидаем.Что(Результат).Равно("х -> х = х + 1");

КонецПроцедуры

&Тест
Процедура ОбъектыЛямбдаВыраженийКешируются() Экспорт

	// Дано
	ЛямбдаВыражение = Новый ЛямбдаВыражение("х -> х = х + 1");
	Объект = ЛямбдаВыражение.ВОбъект();

	ЛямбдаВыражение = Новый ЛямбдаВыражение("х -> х = х + 1");

	// Когда
	Результат = ЛямбдаВыражение.ВОбъект();

	// Тогда
	Ожидаем.Что(Результат).Равно(Объект);

КонецПроцедуры

&Тест
Процедура ОбъектыЛямбдаВыраженийВытесняютсяИзКеша() Экспорт

	// Дано
	ЛямбдаВыражение = Новый ЛямбдаВыражение("х -> х = х + 1");
	Объект = ЛямбдаВыражение.ВОбъект();

	Для Сч = 2 По 22 Цикл // Вытесним из кеша
		_ = Новый ЛямбдаВыражение("х -> х = х + " + Сч)
			.ВОбъект();
	КонецЦикла;

	ЛямбдаВыражение = Новый ЛямбдаВыражение("х -> х = х + 1");

	// Когда
	Результат = ЛямбдаВыражение.ВОбъект();

	// Тогда
	Ожидаем.Что(Результат).Не_().Равно(Объект);

КонецПроцедуры

Функция ЗахватываемыйОбъект()

	Возврат Новый ПостроительДекоратора()
		.Метод(
			Новый Метод("Тест")
				.Публичный()
				.Параметр(Новый ПараметрМетода("Тест"))
				.ТелоМетода("Возврат Тест")
		).Поле(
			Новый Поле("ПубличноеПоле")
				.Публичное()
				.ЗначениеПоУмолчанию(2)
		).Поле(
			Новый Поле("ПриватноеПоле")
				.ЗначениеПоУмолчанию(3)
		).Построить();

КонецФункции

Рефлектор = Новый Рефлектор;
